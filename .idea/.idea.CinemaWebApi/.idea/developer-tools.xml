<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="DeveloperToolsToolWindowSettingsV1" lastSelectedContentNodeId="text-statistic">
    <developerToolsConfigurations>
      <developerToolConfiguration developerToolId="text-statistic" id="b0c8d556-22f1-487c-99a7-ca6009ea4ab7" name="Workbench">
        <properties>
          <property key="text" type="INPUT" value="kotlin.String|using WebApi.Contracts;&#10;using Microsoft.AspNetCore.Mvc;&#10;using Microsoft.AspNetCore.Authorization;&#10;using WebApi.Interface;&#10;&#10;namespace WebApi.Controllers&#10;{&#10;    [Route(&quot;api/[controller]/[action]&quot;)]&#10;    [ApiController]&#10;    [Authorize(Roles = &quot;Admin&quot;)]&#10;    public class HallController : ControllerBase&#10;    {&#10;        private readonly IHallService _hallService;&#10;&#10;        public HallController(IHallService hallService)&#10;        {&#10;            _hallService = hallService;&#10;        }&#10;&#10;        [HttpPost]&#10;        public async Task&lt;IActionResult&gt; CreateHall(string name)&#10;        {&#10;            if (!_hallService.IsValidHallName(name))&#10;            {&#10;                return BadRequest(&quot;Invalid hall name format&quot;);&#10;            }&#10;&#10;            if (await _hallService.HallExistsAsync(name))&#10;            {&#10;                return Conflict(&quot;Hall already exists&quot;);&#10;            }&#10;&#10;            if (!await _hallService.CreateHallAsync(name))&#10;            {&#10;                return BadRequest(&quot;Failed to create hall&quot;);&#10;            }&#10;&#10;            return Ok(&quot;Hall created&quot;);&#10;        }&#10;&#10;        [HttpGet]&#10;        public async Task&lt;IActionResult&gt; GetHalls()&#10;        {&#10;            var halls = await _hallService.GetHallsAsync();&#10;&#10;            if (halls.Count == 0)&#10;            {&#10;                return NotFound(&quot;No halls found&quot;);&#10;            }&#10;&#10;            return Ok(halls);&#10;        }&#10;&#10;        [HttpPut]&#10;        public async Task&lt;IActionResult&gt; UpdateHall(Guid hallUid, string name)&#10;        {&#10;            if (!_hallService.IsValidHallName(name))&#10;            {&#10;                return BadRequest(&quot;Invalid hall name format&quot;);&#10;            }&#10;&#10;            if (await _hallService.HallExistsAsync(name))&#10;            {&#10;                return Conflict(&quot;Hall already exists&quot;);&#10;            }&#10;&#10;            if (!await _hallService.UpdateHallAsync(hallUid, name))&#10;            {&#10;                return BadRequest(&quot;Failed to update hall&quot;);&#10;            }&#10;&#10;            return Ok(&quot;Hall updated&quot;);&#10;        }&#10;&#10;        [HttpDelete]&#10;        public async Task&lt;IActionResult&gt; DeleteHall(Guid hallUid)&#10;        {&#10;            if (!await _hallService.DeleteHallAsync(hallUid))&#10;            {&#10;                return BadRequest(&quot;Failed to delete hall&quot;);&#10;            }&#10;&#10;            return Ok(&quot;Hall deleted&quot;);&#10;        }&#10;    }&#10;}" />
        </properties>
      </developerToolConfiguration>
    </developerToolsConfigurations>
  </component>
</project>